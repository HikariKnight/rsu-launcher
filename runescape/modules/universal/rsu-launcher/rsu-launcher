#!/usr/bin/perl -w

# Tell the script to do this before anything else
BEGIN
{
	# Be strict to avoid messy code
	use strict;

	# Use FindBin module to get script directory
	use FindBin;

	# Add the location of our redistributed cpan modules which are not available by default
	# Translation: Define the $PATH for perl modules
	use lib $FindBin::RealBin."/modules/universal/framework/perl/modules";
	use lib $FindBin::RealBin."/modules/$^O/framework/perl/modules";
	use lib $FindBin::RealBin."/../framework/perl/modules";
	use lib $FindBin::RealBin."/../../$^O/framework/perl/modules";
	use lib $FindBin::RealBin."/modules";

	# Include OS Specific modules
	if ($^O  eq "MSWin32")
	{
		# Use Win32::FileOp so we can access to ShellExecute
		require Win32::FileOp;
		
		# Import to namespace
		Win32::Job->import();
	}
}

# Name of our xrc gui resource file
my $xrc_gui_file = "../../universal/rsu-launcher/rsu-launcher.xrc";

# Disable buffering
$|=1;

# Get script directory
my $cwd = $FindBin::RealBin;

# Get script filename
my $scriptname = $FindBin::Script;
# Detect the current OS
my $OS = "$^O";

# Make a variable for the clientdir
my $clientdir = $cwd;

# Make a variable for users homedir
my $HOME;
# If we are on windows
if ($OS =~ /MSWin32/)
{
	# Set the xrc file to the location of the rsu-launcher folder
	$xrc_gui_file = "modules/universal/rsu-launcher/$xrc_gui_file";
	# Get the environment variable for USERPROFILE
	$HOME = $ENV{"USERPROFILE"};
	# Replace all / with \
	$HOME =~ s/\//\\/g;
}
# Else we are on UNIX
else
{
	# Make the $clientdir point to the location of the client files
	$clientdir = "$cwd/../../../";
	
	# Set the $HOME variable to the players home directory
	$HOME = $ENV{"HOME"};
}

# If this script have been installed systemwide
if ($cwd =~ /^(\/usr\/s?bin|\/opt\/runescape|\/usr\/local\/s?bin)/)
{
	# Change $clientdir to ~/.config/runescape
	$clientdir = "$HOME/.config/runescape/";
}

#---------------------------------------- *** ----------------------------------------
#---------------------------------------- *** ----------------------------------------
#---------------------------------------- *** ----------------------------------------

package wxTopLevelFrame;

use Wx qw[:everything];
use Wx::XRC;
use Wx::WebView;
# Which events shall we include
use Wx::Event qw(EVT_BUTTON);

use base qw(Wx::Frame Wx::ScrolledWindow);

sub new
{
	# Create a class
	my $class = shift;
	
	# Assign class object to $self
	my $self = $class->SUPER::new;
	
	# Initialize everything
	$self->initialize;
	
	return $self;
}

sub initialize
{
	# Get pointers
	my $self = shift;
	
	# Create mutators for widgets (enter the objectname for every object here)
	$self->create_mutator
	(
		qw
		(
			xrc_resource
		)
	);
	
	load_xrc_gui($self);
	
	set_layout($self);
	
	set_tooltips($self);
}

sub load_xrc_gui
{
	# Get the pointers
	my $self = shift;
	
	# Get the xrc file
	my $xrc_file = "$cwd/$xrc_gui_file";
	
	# Initialize WX
	Wx::InitAllImageHandlers();
	
	# Create xrc/xml resource
	$self->xrc_resource = Wx::XmlResource->new;
	# Initialize handlers
	$self->xrc_resource->InitAllHandlers;
	# Load the xrc file
	$self->xrc_resource->Load($xrc_file);
	
	# Tell what window/frame to load
	$self->xrc_resource->LoadFrame($self,undef,"mainwindow");
}

#
#---------------------------------------- *** ----------------------------------------
#

sub set_layout
{
	# Get the pointers
	my $self = shift;
	
	# Find the widgets
	# $self->objectname = $self->FindWindow('objectname');
	
	# Make a vertical box sizer for use to organize stuff
	$self->{mainsizer} = Wx::GridSizer->new(1,1,0,0);
	
	# Make a tabbed window(wxNoteBook) for the launcher
	$self->{tabcontrol} = Wx::Notebook->new($self,-1,wxDefaultPosition, wxDefaultSize);
	
	# Make the mainpanel and add it to the boxsizer
	$self->{mainpanel} = Wx::ScrolledWindow->new($self->{tabcontrol}, -1, wxDefaultPosition, wxDefaultSize );

	# Add the mainpanel to the tabbed window
	$self->{tabcontrol}->AddPage($self->{mainpanel}, "RSU-Launcher");
	
	# Create a webview which loads the runescape news page
	$self->{webview} = Wx::WebView::New($self->{mainpanel}, wxID_ANY,  "http://services.runescape.com/m=news/" );
	
	# Create the flexsizer needed for the layout
	$self->{layoutsizer} = Wx::BoxSizer->new(wxHORIZONTAL);#Wx::FlexGridSizer->new(1,2,0,0);
	
	# Make a vertical box sizer for use to organize buttons
	$self->{verticalbuttons} = Wx::BoxSizer->new(wxVERTICAL);
	
	# Make buttons
	make_button($self, "playnow", "Play Now");
	make_button($self, "update", "Run Updater");
	make_button($self, "settings", "Settings");
	make_button($self, "forums", "RS Forums");
	$self->{verticalbuttons}->Add(1,1,1);
	make_button($self, "linuxthread", "Linux Thread");
	make_button($self, "about", "About RSU");
	
	# Add the sizers and panels together to form the layout
	$self->{layoutsizer}->Add($self->{webview},1,wxEXPAND|wxALL,5);
	$self->{layoutsizer}->Add($self->{verticalbuttons},0,wxEXPAND|wxALL,5);
	$self->{mainsizer}->Add($self->{tabcontrol},1,wxEXPAND|wxALL,0);
	
	# Add scrollbars to the mainpanel if needed
	setScrollBars($self->{mainpanel});
	
	# If we are on linux, darwin/mac or windows (which supports addons)
	if ($OS =~ /(linux|darwin|MSWin32)/)
	{
		# Check whats is inside the modules folder
		opendir(my $modulefolders, "$clientdir/modules") || die "Incomplete client structure! You must reinstall the rsu-client!";
		
		# While there is still content inside the folder
		while (readdir $modulefolders)
		{
			# If the current content is the addons folder
			if ($_ =~ /^addons$/ && -d "$clientdir/modules/$_")
			{
				# Add the addons/module page
				create_addons_page($self);
			}
		}
		
		# Close the directory to free up memory
		closedir($modulefolders);
	}
	
	# Set the events
	set_events($self);
	
	# Add the contents of the layoutsizer to the mainpanel
	$self->{mainpanel}->SetSizer($self->{layoutsizer});
	# Set the sizer for the window itself
	$self->SetSizer( $self->{mainsizer} );
	# Make everything inside the mainsizer fit the window
	$self->{mainsizer}->Fit($self);
	
	# Set default size
	$self->SetSize(880,500);
	$self->SetMinSize($self->GetSize);
	
	# Set the layout
	$self->Layout;
	# Refresh window
	$self->Refresh;
}

#
#---------------------------------------- *** ----------------------------------------
#

sub create_addons_page
{
	# Get the passed data
	my ($self) = @_;
	
	# Make the new page for the tabbed window
	$self->{addonspage} = Wx::ScrolledWindow->new($self->{tabcontrol}, -1, wxDefaultPosition, wxDefaultSize, );
	
	# Add the page to the tabbed window
	$self->{tabcontrol}->AddPage($self->{addonspage}, "Installed Add-Ons");
	
	# Make sizers for the top of the page
	$self->{addonsvertical} = Wx::BoxSizer->new(wxVERTICAL);
	
	# Make a gridsizer which will contain the addons
	$self->{addonlist} = Wx::GridSizer->new(1,4,5,5);
	
	# Make a button which tells the user how to add addons
	$self->{addons_labeltop} = Wx::StaticText->new($self->{addonspage}, -1, "\nClick on the button coresponding to the addon you want to manually launch!\nClick the button below to open the addons directory. Install only addons you trust!", wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE_HORIZONTAL);
	
	# Make a button to open the addons dir and make it run the function open_addonsdir when clicked
	$self->{addonsdirbutton} = Wx::Button->new($self->{addonspage}, -1, "Open Addons Folder (place extracted addons here)", wxDefaultPosition, wxDefaultSize, );
	EVT_BUTTON($self->{addonsdirbutton}, $self->{addonsdirbutton}, \&open_addonsdir);
	
	# Add the label and button to the vertical boxsizer
	$self->{addonsvertical}->Add($self->{addons_labeltop}, 0, wxALL|wxALIGN_CENTER,0);
	$self->{addonsvertical}->Add($self->{addonsdirbutton}, 0, wxALL|wxALIGN_CENTER,0);
	$self->{addonsvertical}->Add(10,10,0,0);
	
	# Make a groupbox for tidyness
	$self->{addonsbox} = Wx::StaticBox->new($self->{addonspage},-1, "Addons you have installed (Note: Avoid having addons with identical names)");
	$self->{addonscontainer} = Wx::StaticBoxSizer->new($self->{addonsbox},wxVERTICAL); 
	
	# Add the addonslist to the container
	$self->{addonscontainer}->Add($self->{addonlist},0,wxEXPAND|wxALL,0);
	
	# Add the gridsizer to the vertical boxsizer
	$self->{addonsvertical}->Add($self->{addonscontainer},1,wxEXPAND|wxALL,0);
	
	# Open the addons directory
	opendir(my $addondirs, "$clientdir/modules/addons/");
	
	# While there is still content in the folder
	while (readdir $addondirs)
	{
		# If the current content is either named universal or the same as $OS
		if (($_ =~ /^universal$/ && -d "$clientdir/modules/addons/$_") || ($_ =~ /^$OS$/ && -d "$clientdir/modules/addons/$_"))
		{
			# Make the addons buttons
			make_addon_buttons($self, "$clientdir/modules/addons/$_");
		}
	}
	
	# Close the directory to free memory
	closedir($addondirs);
	
	# Make sure the layout is displayed properly
	$self->{addonspage}->SetSizer($self->{addonsvertical});
	$self->{addonsvertical}->Fit($self->{addonspage});
	$self->{addonspage}->Layout();
	
	# Add scrollbars if neccessary
	setScrollBars($self->{addonspage});
	
}

#
#---------------------------------------- *** ----------------------------------------
#

sub make_addon_buttons
{
	# Get the passed data
	my ($self, $addondir) = @_;
	
	# Make a counter so we know when to add a new row to the grid
	my $counter = 1;
	
	# Open the addon directory
	opendir(my $addons, $addondir);
	
	# While there is still content in the directory
	while (readdir $addons)
	{
		# Go to next if the current content is a relative directory (. or ..) or if the folder is named framework
		next if $_ =~ /^(\.|\.\.|framework)$/;
		
		# Pass the current addon to a variable we can reuse as $_ gets overwritten later
		my $addon = $_;
		
		# If the current "addon" is a folder then continue
		if (-d "$addondir/$addon")
		{
			# If $counter is a modulo of 4 (translation: every 4th)
			if (($counter %= 4) == 0)
			{
				# Increase the amount of rows by 1
				$self->{addonlist}->SetRows($self->{addonlist}->GetRows()+1);
			}
			
			# Make a button for the addon
			$self->{$addon} = Wx::Button->new($self->{addonspage}, -1, "$addon", wxDefaultPosition, wxDefaultSize, );
			
			# Make an event trigger for the newly created button
			EVT_BUTTON($self, -1, \&launch_addon);
			
			# Add the button to the vertical addon list sizer
			$self->{addonlist}->Add($self->{$addon}, 0, wxEXPAND|wxALL,5);
			
			# Increase counter by 1
			$counter += 1;
		}
	}
	
	# Close the directory to free memory
	closedir($addons);
}

#
#---------------------------------------- *** ----------------------------------------
#

sub setScrollBars
{
	# Get the widgets to make scrollable
	my @scrolledWindows = @_;
	
	# Set scroll properties
	my $pixelsPerUnitX = 0; 
    my $pixelsPerUnitY = 5; 
    my $noUnitsX = 0; 
    my $noUnitsY = 100; 
	
	# For each widget to make scrollable
	foreach my $window (@scrolledWindows)
	{
		# Enable scrolling
		$window->SetScrollbars($pixelsPerUnitX, $pixelsPerUnitY, $noUnitsX, $noUnitsY);
	} 
}

#
#---------------------------------------- *** ----------------------------------------
#

sub set_events
{
	my $self = shift;
	
	# Setup the events
	# EVT_BUTTON($self, Wx::XmlResource::GetXRCID('objectname'), \&function);
}

#
#---------------------------------------- *** ----------------------------------------
#

sub make_button
{
	my ($self, $button, $label) = @_;
	
	# Make a button for the launcher
	$self->{$button} = Wx::Button->new($self->{mainpanel}, -1, "$label", wxDefaultPosition, wxDefaultSize, );
	$self->{verticalbuttons}->Add($self->{$button},0,wxEXPAND|wxALL,5);
	
	# Make an event trigger for the newly created button
	EVT_BUTTON($self->{$button}, -1, \&$button);
}

#
#---------------------------------------- *** ----------------------------------------
#

sub playnow
{
	# If we are not on windows
	if ($OS !~ /MSWin32/)
	{
		# Run the runescape script
		system "\"$cwd/../../../runescape\" &";
	}
	# Else
	else
	{
		# Run the runescape executable
		system (1,"\"$cwd/rsu-launcher.exe\" --script=runescape --showcmd=true");
	}
}

#
#---------------------------------------- *** ----------------------------------------
#

sub update
{
	# Get the passed data
	my ($self, $event) = @_;
	
	# If we are not on windows
	if ($OS =~ /MSWin32/)
	{
		# Get the handle for the perl window
		my $cmdwindow = Win32::GUI::GetPerlWindow();
		# Show the cmd window
		Win32::GUI::Show($cmdwindow);
		
		# Run the runescape executable
		system "\"$cwd/rsu-launcher.exe\" --showcmd=true --script=update-runescape-client";
		
		# Show the cmd window again
		Win32::GUI::Hide($cmdwindow);
		
		# Tell the user that they should close the launcher and run "Download-Windows-Files.exe" to finish the update
		Wx::MessageBox("Finished running the updater!\nPlease close the Launcher and run the \"Download-Windows-Files.exe\"\nlocated in the client's folder to finish the update.", "Running update complete!", wxOK,$self);
		
	}
	elsif ($OS =~ /darwin/)
	{
		# Run the update script
		system "open \"$cwd/../../../update-runescape-client\" &";
	}
	# Else
	else
	{
		# Run the update script
		system "\"$cwd/../../../update-runescape-client\" &";
	}
}

#
#---------------------------------------- *** ----------------------------------------
#

sub settings
{
	# If we are not on windows
	if ($OS !~ /MSWin32/)
	{
		# Run the runescape script
		system "\"$cwd/../../../rsu-settings\" &";
	}
	# Else
	else
	{
		# Run the runescape executable
		system (1,"\"$cwd/rsu-launcher.exe\" --script=modules/settings --showcmd=true --usedpar=true");
	}
}

#
#---------------------------------------- *** ----------------------------------------
#

sub forums
{
	# If we are on MacOSX/Darwin
	if ($OS =~ /darwin/)
	{
		# Run the runescape script
		system "open \"http://services.runescape.com/m=forum/forums.ws\" &";
	}
	# Else if we are on windows
	elsif($OS =~ /MSWin32/)
	{
		Win32::FileOp::ShellExecute("http://services.runescape.com/m=forum/forums.ws");
	}
	# Else
	else
	{
		# Run the runescape executable
		system "xdg-open \"http://services.runescape.com/m=forum/forums.ws\" &";
	}
}

#
#---------------------------------------- *** ----------------------------------------
#

sub linuxthread
{
	# If we are on MacOSX/Darwin
	if ($OS =~ /darwin/)
	{
		# Open the thread in the users default web browser
		system "open \"http://services.runescape.com/m=forum/forums.ws?25,26,99,61985129,goto,99999\" &";
	}
	# Else if we are on windows
	elsif($OS =~ /MSWin32/)
	{
		# Open the thread in the users default web browser
		Win32::FileOp::ShellExecute("http://services.runescape.com/m=forum/forums.ws?25,26,99,61985129,goto,99999");
	}
	# Else
	else
	{
		# Open the thread in the users default web browser
		system "xdg-open \"http://services.runescape.com/m=forum/forums.ws?25,26,99,61985129,goto,99999\" &";
	}
}

#
#---------------------------------------- *** ----------------------------------------
#

sub about
{
	my $self = shift;
	
	# Make the about dialog info
	my $info = Wx::AboutDialogInfo->new;
	
	# Get the rsu client version
	my $version = `"$cwd/../../../runescape" --version`;
	
	# Use regular expression to get only the version number
	$version =~ s/.+version\s+(\d{1,1}\.\d{1,1}\.\d{1,1})\n/$1/;

	# Add info to the about dialog
	$info->SetName( 'RuneScape Unix Client' );
    $info->SetVersion( $version );
    $info->SetDescription( 'The Unofficial Universal Unix port of the RuneScape Downloadable Client for Windows' );
    $info->SetCopyright( '(c) 2011-2013 HikariKnight' );
    $info->SetWebSite( 'https://github.com/HikariKnight/rsu-client', 'Get the sourcecode from GitHub.com' );
    $info->SetDevelopers( ['HikariKnight - Main developer', '', '### Contributors ###', 'Ker Laeda - AUR Repository maintainer', 'Garage Punk - forcepulseaudio code', 'Jmb71 - findjavalib regex', 'Ethoxyethaan - original launch script for Linux', 'Fallen_Unia - Zenity support in the Updater' ] );

    $info->SetArtists( [ 'None' ] );

    Wx::AboutBox( $info );
}

#
#---------------------------------------- *** ----------------------------------------
#

sub launch_addon
{
	# Get the passed data
	my ($self, $event) = @_;
	
	# Get the name of the addon that triggered the event
	my $addon = $event->GetEventObject()->GetLabel();
	
	# Open the universal addon directory
	opendir (my $addons, "$clientdir/modules/addons/universal/");
	
	# While there is still content in the folder
	while (readdir $addons)
	{
		# Go to next if the current content is not the folder for this addon
		next if $_ !~ /^$addon$/;
		
		# If we are on windows
		if ($OS =~ /MSWin32/)
		{
			# Launch the addon
			system (1,"\"$cwd/rsu-launcher.exe\" --showcmd=true --script=modules/addons/universal/$addon/moduleloader.pl &");
		}
		# Else
		else
		{
			# Launch the addon using perl
			system "\"$cwd/../../../rsu-launcher\" --script=modules/addons/universal/$addon/moduleloader.pl &";
		}
	}
	
	# Close the directory to free memory
	closedir($addons);
	
	# Open the platform specific addons directory
	opendir (my $platform_addons, "$clientdir/modules/addons/$OS/");
	
	# While there is still content in the folder
	while (readdir $platform_addons)
	{
		# Go to next if the current content is not the folder for this addon
		next if $_ !~ /^$addon$/;
		
		# If we are on windows
		if ($OS =~ /MSWin32/)
		{
			# Launch the addon
			system (1,"\"$cwd/rsu-launcher.exe\" --showcmd=true --script=modules/addons/$OS/$addon/moduleloader.pl &");
		}
		# Else
		else
		{
			# Launch the addon using perl
			system "perl -w \"$clientdir/modules/addons/$OS/$addon/moduleloader.pl\" &";
		}
	}
	
	# Close the directory to free memory
	closedir($platform_addons);
}

#
#---------------------------------------- *** ----------------------------------------
#

# Create mutator function from "Programming Perl"
sub create_mutator
{

	my $self = shift;

	# From "Programming Perl" 3rd Ed. p338.
	for my $attribute (@_)
	{

		no strict "refs"; # So symbolic ref to typeglob works.
		no warnings;      # Suppress "subroutine redefined" warning.

		*$attribute = sub : lvalue
		{

			my $self = shift;

			$self->{$attribute} = shift if @_;
			$self->{$attribute};

		};

	}

}

#
#---------------------------------------- *** ----------------------------------------
#

sub open_addonsdir
{
	# Get the pointers
	my ($self,$event) = @_;
	
	# Put the path to the addons directory into a variable
	my $addonsdir = "$clientdir/modules/addons";
	
	# If we are on windows
	if ($OS =~ /MSWin32/)
	{
		# Replace all / with \
		$addonsdir =~ s/\//\\/g;
		
		# Open the addons directory
		system (1,"explorer.exe \"$addonsdir\"");
	}
	# Else if we are on darwin/mac
	elsif($OS =~ /darwin/)
	{
		# Open the addons directory
		system "open \"$addonsdir/\"";
	}
	# Else
	else
	{
		# Open the addons directory
		system "xdg-open \"$addonsdir/\"";
	}
}

### Events

sub close_clicked
{
	# Get pointers
	my ($self, $event) = @_;
	
	# Close window
	$self->Destroy();
}

#
#---------------------------------------- *** ----------------------------------------
#

sub set_tooltips
{
	my ($self) = @_;
		
	# Set tooltips with info about the settings
	# $self->objectname->SetToolTip("message");
	
}

#---------------------------------------- *** ----------------------------------------
#---------------------------------------- *** ----------------------------------------
#---------------------------------------- *** ----------------------------------------

package application;
use base qw(Wx::App);

sub OnInit
{
	# Get pointers
	my $self = shift;
	
	# Create mainwindow(new window)
	my $mainwindow = wxTopLevelFrame->new(undef, -1);
	
	# Set mainwindo/topwindow
	$self->SetTopWindow($mainwindow);
	
	# Show the window
	$mainwindow->Show(1);
}

#---------------------------------------- *** ----------------------------------------
#---------------------------------------- *** ----------------------------------------
#---------------------------------------- *** ----------------------------------------


package main;

my $app = application->new;
$app->MainLoop;

